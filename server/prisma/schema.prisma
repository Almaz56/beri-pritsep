// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int      @id @default(autoincrement())
  telegramId          BigInt   @unique
  firstName           String
  lastName            String?
  username            String?
  phoneNumber         String?
  verificationStatus  VerificationStatus @default(PENDING)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  bookings            Booking[]
  verificationDocs    VerificationDocument[]
  payments            Payment[]
  supportChats        SupportChat[]

  @@map("users")
}

model Admin {
  id                  Int      @id @default(autoincrement())
  email               String   @unique
  password            String
  firstName           String
  lastName            String
  role                AdminRole @default(ADMIN)
  isActive            Boolean  @default(true)
  lastLoginAt         DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  supportMessages     SupportMessage[]

  @@map("admins")
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String
  address     String
  photos      String[] @default([])
  latitude    Float?
  longitude   Float?
  city        String
  region      String
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  trailers    Trailer[]

  @@map("locations")
}

model Trailer {
  id                    Int           @id @default(autoincrement())
  name                  String
  description           String
  locationId            Int?
  photos                String[]      @default([])
  capacity              Int           // Вместимость в кг
  dimensions            Json?         // Габариты {length, width, height} в мм
  dailyRate             Float         // Цена за сутки
  minRentalHours        Int           // Минимальное время аренды в часах
  minRentalPrice        Float         // Цена за минимальное время аренды
  extraHourPrice        Float         // Цена за час сверх минимального
  pickupPrice           Float         // Цена забора прицепа от клиента
  depositAmount         Float         // Сумма залога
  status                TrailerStatus @default(AVAILABLE)
  features              String[]      @default([])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  location              Location?     @relation(fields: [locationId], references: [id])
  bookings              Booking[]

  @@map("trailers")
}

model Booking {
  id              Int             @id @default(autoincrement())
  userId          Int
  trailerId       Int
  startTime       DateTime
  endTime         DateTime
  rentalType      RentalType
  additionalServices Json         @default("{}")
  pricing         Json
  totalAmount     Float
  depositAmount   Float
  status          BookingStatus   @default(PENDING_PAYMENT)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  trailer         Trailer         @relation(fields: [trailerId], references: [id])
  payments        Payment[]
  photoChecks     PhotoCheck[]

  @@map("bookings")
}

model Payment {
  id              Int             @id @default(autoincrement())
  bookingId       Int
  userId          Int
  paymentId       String          @unique
  orderId         String          @unique
  amount          Float
  type            PaymentType
  status          PaymentStatus   @default(PENDING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  booking         Booking         @relation(fields: [bookingId], references: [id])
  user            User            @relation(fields: [userId], references: [id])

  @@map("payments")
}

model VerificationDocument {
  id              Int             @id @default(autoincrement())
  userId          Int
  documentType    DocumentType
  filename        String
  filePath        String
  status          VerificationStatus @default(PENDING)
  moderatorComment String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id])

  @@map("verification_documents")
}

model PhotoCheck {
  id              Int             @id @default(autoincrement())
  bookingId       Int
  userId          Int
  type            PhotoCheckType
  photos          Json            @default("{}")
  status          PhotoCheckStatus @default(MISSING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  booking         Booking         @relation(fields: [bookingId], references: [id])

  @@map("photo_checks")
}

model PhotoUpload {
  id              Int             @id @default(autoincrement())
  bookingId       Int
  userId          Int
  type            PhotoCheckType
  side            PhotoSide
  filename        String
  filePath        String
  uploadedAt      DateTime        @default(now())

  @@map("photo_uploads")
}

model SupportChat {
  id              Int             @id @default(autoincrement())
  userId          Int
  lastMessageAt   DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  messages        SupportMessage[]

  @@map("support_chats")
}

model SupportMessage {
  id              Int             @id @default(autoincrement())
  chatId          Int
  senderId        Int?            // null for user messages, adminId for admin messages
  senderType      MessageSenderType
  content         String
  attachments     String[]        @default([])
  isRead          Boolean         @default(false)
  createdAt       DateTime        @default(now())

  // Relations
  chat            SupportChat     @relation(fields: [chatId], references: [id])
  admin           Admin?          @relation(fields: [senderId], references: [id])

  @@map("support_messages")
}

// Enums
enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum TrailerStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum RentalType {
  HOURLY
  DAILY
}

enum BookingStatus {
  PENDING_PAYMENT
  PAID
  ACTIVE
  RETURNED
  CLOSED
  CANCELLED
}

enum PaymentType {
  RENTAL
  DEPOSIT_HOLD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum DocumentType {
  PASSPORT
  DRIVERS_LICENSE
}

enum PhotoCheckType {
  CHECK_IN
  CHECK_OUT
}

enum PhotoCheckStatus {
  MISSING
  COMPLETED
}

enum PhotoSide {
  FRONT
  REAR
  LEFT
  RIGHT
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}


enum MessageSenderType {
  USER
  ADMIN
}
