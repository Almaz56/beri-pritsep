import TelegramBot from 'node-telegram-bot-api';
import logger from '../utils/logger';
import { users } from '../data';

interface PhoneRequest {
  telegramId: string;
  userId: string;
  timestamp: Date;
}

class TelegramBotService {
  private bot: TelegramBot | null = null;
  private phoneRequests = new Map<string, PhoneRequest>();
  private botToken: string;

  constructor() {
    this.botToken = process.env['BOT_TOKEN'] || '';
    if (!this.botToken) {
      logger.warn('BOT_TOKEN not provided. Telegram Bot will not be initialized.');
      return;
    }
    this.initializeBot();
  }

  private initializeBot(): void {
    try {
      this.bot = new TelegramBot(this.botToken, { polling: true });
      this.setupHandlers();
      logger.info('Telegram Bot initialized successfully');
    } catch (error) {
      logger.error('Failed to initialize Telegram Bot:', error);
    }
  }

  private setupHandlers(): void {
    if (!this.bot) return;

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId) {
        this.bot?.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID');
        return;
      }

      const user = Array.from(users.values()).find(u => u.telegramId === parseInt(telegramId));
      
      if (user) {
        this.bot?.sendMessage(chatId, 
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ë–µ—Ä–∏ –ø—Ä–∏—Ü–µ–ø"!\n\n` +
          `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: ${user.firstName} ${user.lastName || ''}\n` +
          `–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${user.verificationStatus}\n\n` +
          `–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å Mini App.\n` +
          `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Mini App.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.`
        );
      } else {
        this.bot?.sendMessage(chatId, 
          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ë–µ—Ä–∏ –ø—Ä–∏—Ü–µ–ø"!\n\n' +
          '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ Mini App –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.'
        );
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id;
      this.bot?.sendMessage(chatId, 
        'ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É "–ë–µ—Ä–∏ –ø—Ä–∏—Ü–µ–ø"\n\n' +
        '–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å Mini App.\n\n' +
        '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n' +
        '1. –û—Ç–∫—Ä–æ–π—Ç–µ Mini App\n' +
        '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
        '3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä"\n' +
        '4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ Mini App.'
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    this.bot.on('contact', (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      const contact = msg.contact;

      if (!telegramId || !contact) {
        this.bot?.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (contact.user_id?.toString() !== telegramId) {
        this.bot?.sendMessage(chatId, 
          '–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
        );
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.updateUserPhone(telegramId, contact.phone_number)
        .then(() => {
          this.bot?.sendMessage(chatId, 
            `‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n` +
            `–ù–æ–º–µ—Ä: ${contact.phone_number}\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Mini App –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.`
          );
        })
        .catch((error) => {
          logger.error('Error updating user phone:', error);
          this.bot?.sendMessage(chatId, 
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
          );
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      logger.error('Telegram Bot error:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ polling –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      logger.error('Telegram Bot polling error:', error);
    });
  }

  /**
   * –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async requestPhone(telegramId: string, userId: string): Promise<boolean> {
    if (!this.bot) {
      logger.error('Telegram Bot not initialized');
      return false;
    }

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
      this.phoneRequests.set(telegramId, {
        telegramId,
        userId,
        timestamp: new Date()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.bot.sendMessage(telegramId, 
        'üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n' +
        '–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ Mini App.\n\n' +
        '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
        {
          reply_markup: {
            keyboard: [[{
              text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
              request_contact: true
            }]],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        }
      );

      logger.info(`Phone request sent to user ${telegramId}`);
      return true;
    } catch (error) {
      logger.error('Error sending phone request:', error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async updateUserPhone(telegramId: string, phone: string): Promise<void> {
    const user = Array.from(users.values()).find(u => u.telegramId === parseInt(telegramId));
    
    if (!user) {
      throw new Error(`User with telegramId ${telegramId} not found`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.phone = phone;
    user.phoneVerificationStatus = 'VERIFIED';
    user.updatedAt = new Date();

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    this.phoneRequests.delete(telegramId);

    logger.info(`Phone updated for user ${user.id}: ${phone}`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  getPhoneRequestStatus(telegramId: string): PhoneRequest | null {
    return this.phoneRequests.get(telegramId) || null;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotification(telegramId: string, message: string): Promise<boolean> {
    if (!this.bot) {
      logger.error('Telegram Bot not initialized');
      return false;
    }

    try {
      await this.bot.sendMessage(telegramId, message);
      logger.info(`Notification sent to user ${telegramId}`);
      return true;
    } catch (error) {
      logger.error('Error sending notification:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
   */
  isAvailable(): boolean {
    return this.bot !== null;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  async stop(): Promise<void> {
    if (this.bot) {
      await this.bot.stopPolling();
      this.bot = null;
      logger.info('Telegram Bot stopped');
    }
  }
}

export const telegramBotService = new TelegramBotService();
