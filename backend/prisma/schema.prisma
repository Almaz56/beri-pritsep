// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int      @id @default(autoincrement())
  telegramId          BigInt   @unique
  firstName           String
  lastName            String?
  username            String?
  phoneNumber         String?
  verificationStatus  VerificationStatus @default(PENDING)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  bookings            Booking[]
  verificationDocs    VerificationDocument[]
  payments            Payment[]

  @@map("users")
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String
  address     String
  latitude    Float
  longitude   Float
  city        String
  region      String
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())

  // Relations
  trailers    Trailer[]

  @@map("locations")
}

model Trailer {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  locationId    Int
  photos        String[]      @default([])
  hourlyRate    Float
  dailyRate     Float
  depositAmount Float
  status        TrailerStatus @default(AVAILABLE)
  features      String[]      @default([])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  location      Location      @relation(fields: [locationId], references: [id])
  bookings      Booking[]

  @@map("trailers")
}

model Booking {
  id              Int             @id @default(autoincrement())
  userId          Int
  trailerId       Int
  startTime       DateTime
  endTime         DateTime
  rentalType      RentalType
  totalAmount     Float
  depositAmount   Float
  status          BookingStatus   @default(PENDING)
  paymentId       String?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  trailer         Trailer         @relation(fields: [trailerId], references: [id])
  payments        Payment[]

  @@map("bookings")
}

model Payment {
  id                  String          @id @default(cuid())
  bookingId           Int
  userId              Int
  amount              Float
  type                PaymentType
  status              PaymentStatus   @default(PENDING)
  tinkoffPaymentId    String?
  tinkoffHoldId       String?
  refundId            String?
  failureReason       String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  booking             Booking         @relation(fields: [bookingId], references: [id])
  user                User            @relation(fields: [userId], references: [id])

  @@map("payments")
}

model VerificationDocument {
  id                Int             @id @default(autoincrement())
  userId            Int
  documentType      DocumentType
  fileUrl           String
  fileName          String
  fileSize          Int
  mimeType          String
  status            DocumentStatus   @default(PENDING)
  moderatorId       Int?
  moderatorNotes    String?
  rejectionReason   String?
  processedAt       DateTime?
  createdAt        DateTime        @default(now())

  // Relations
  user              User            @relation(fields: [userId], references: [id])

  @@map("verification_documents")
}

model DocumentPhoto {
  id              Int       @id @default(autoincrement())
  bookingId       Int
  type            PhotoType
  fileUrl         String
  fileName        String
  uploadedAt      DateTime  @default(now())
  description     String?

  @@map("document_photos")
}

// Enums
enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED

  @@map("verification_status")
}

enum TrailerStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  UNAVAILABLE

  @@map("trailer_status")
}

enum RentalType {
  HOURLY
  DAILY

  @@map("rental_type")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED

  @@map("booking_status")
}

enum PaymentType {
  RENTAL
  DEPOSIT
  REFUND

  @@map("payment_type")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED

  @@map("payment_status")
}

enum DocumentType {
  PASSPORT
  DRIVING_LICENSE

  @@map("document_type")
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("document_status")
}

enum PhotoType {
  TRAILER_BEFORE
  TRAILER_AFTER
  INSIDE_BEFORE
  INSIDE_AFTER

  @@map("photo_type")
}
