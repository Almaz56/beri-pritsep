import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { trailersApi, type Trailer } from '../api';
import { showTelegramAlert } from '../telegram';
import './LocationPage.css';

const LocationPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const locationId = searchParams.get('location_id');
  const startapp = searchParams.get('startapp');
  
  const [trailers, setTrailers] = useState<Trailer[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Handle Telegram Mini App startapp parameter
    if (startapp) {
      if (startapp.startsWith('location_')) {
        const extractedLocationId = startapp.replace('location_', '');
        // Update URL to include location_id parameter
        const newSearchParams = new URLSearchParams(searchParams);
        newSearchParams.set('location_id', extractedLocationId);
        newSearchParams.delete('startapp'); // Remove startapp parameter
        window.history.replaceState({}, '', `?${newSearchParams.toString()}`);
      } else if (startapp.startsWith('trailer_')) {
        const trailerId = startapp.replace('trailer_', '');
        // Redirect to trailer page
        window.location.href = `/trailer/${trailerId}`;
        return;
      }
    }
    
    loadTrailers();
  }, [locationId, startapp, searchParams]);

  const loadTrailers = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await trailersApi.getTrailers(locationId || undefined);
      
      if (response.success && response.data) {
        setTrailers(response.data);
      } else {
        setError(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏—Ü–µ–ø—ã');
      }
    } catch (err) {
      console.error('Error loading trailers:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const handleTrailerClick = (trailerId: string) => {
    window.location.href = `/trailer/${trailerId}`;
  };

  const formatDimensions = (dimensions: Trailer['dimensions']) => {
    if (!dimensions) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    return `${dimensions.length / 1000}–º √ó ${dimensions.width / 1000}–º √ó ${dimensions.height / 1000}–º`;
  };

  const getStatusColor = (status: Trailer['status']) => {
    switch (status) {
      case 'AVAILABLE':
        return '#4CAF50';
      case 'RENTED':
        return '#FF9800';
      case 'MAINTENANCE':
        return '#F44336';
      default:
        return '#9E9E9E';
    }
  };

  const getStatusText = (status: Trailer['status']) => {
    switch (status) {
      case 'AVAILABLE':
        return '–î–æ—Å—Ç—É–ø–µ–Ω';
      case 'RENTED':
        return '–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω';
      case 'MAINTENANCE':
        return '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  if (loading) {
    return (
      <div className="location-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏—Ü–µ–ø–æ–≤...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="location-page">
        <div className="error-container">
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
          <p>{error}</p>
          <button onClick={loadTrailers} className="retry-button">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (trailers.length === 0) {
    return (
      <div className="location-page">
        <div className="empty-container">
          <h2>–ü—Ä–∏—Ü–µ–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
          <p>–í –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏—Ü–µ–ø–æ–≤</p>
        </div>
      </div>
    );
  }

  return (
    <div className="location-page">
      <div className="location-header">
        <h1>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏—Ü–µ–ø—ã</h1>
        {locationId && (
          <p className="location-info">
            –õ–æ–∫–∞—Ü–∏—è: {trailers[0]?.location?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è'}
          </p>
        )}
      </div>

      <div className="trailers-grid">
        {trailers.map((trailer) => (
          <div
            key={trailer.id}
            className="trailer-card"
            onClick={() => handleTrailerClick(trailer.id)}
          >
            <div className="trailer-image">
              {trailer.photos.length > 0 ? (
                <img
                  src={trailer.photos[0]}
                  alt={trailer.name}
                  loading="lazy"
                />
              ) : (
                <div className="no-image">
                  <span>üì∑</span>
                </div>
              )}
              <div 
                className="status-badge"
                style={{ backgroundColor: getStatusColor(trailer.status) }}
              >
                {getStatusText(trailer.status)}
              </div>
            </div>

            <div className="trailer-info">
              <h3 className="trailer-name">{trailer.name}</h3>
              
              <div className="trailer-specs">
                <div className="spec-item">
                  <span className="spec-label">–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å:</span>
                  <span className="spec-value">{trailer.capacity} –∫–≥</span>
                </div>
                
                <div className="spec-item">
                  <span className="spec-label">–ì–∞–±–∞—Ä–∏—Ç—ã:</span>
                  <span className="spec-value">{formatDimensions(trailer.dimensions)}</span>
                </div>
                
                <div className="spec-item">
                  <span className="spec-label">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</span>
                  <span className="spec-value">
                    {trailer.features.length > 0 ? trailer.features.join(', ') : '–ù–µ—Ç'}
                  </span>
                </div>
              </div>

              <div className="trailer-pricing">
                <div className="price-item">
                  <span className="price-label">–ú–∏–Ω–∏–º—É–º:</span>
                  <span className="price-value">{trailer.minRentalHours}—á = {trailer.minRentalPrice}‚ÇΩ</span>
                </div>
                <div className="price-item">
                  <span className="price-label">–î–æ–ø. —á–∞—Å:</span>
                  <span className="price-value">{trailer.extraHourPrice}‚ÇΩ</span>
                </div>
                <div className="price-item">
                  <span className="price-label">–°—É—Ç–∫–∏:</span>
                  <span className="price-value">{trailer.dailyRate}‚ÇΩ</span>
                </div>
              </div>

              <div className="trailer-actions">
                <button 
                  className="view-details-button"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleTrailerClick(trailer.id);
                  }}
                >
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="location-footer">
        <p className="trailers-count">
          –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Ü–µ–ø–æ–≤: {trailers.length}
        </p>
      </div>
    </div>
  );
};

export default LocationPage;
