import React, { useState, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { documentsApi, getAuthToken, authApi } from '../api';
import { showTelegramAlert, setupTelegramMainButton, hideTelegramMainButton } from '../telegram';
import './DocumentUploadPage.css';

type DocumentType = 'PASSPORT' | 'DRIVER_LICENSE';

const DocumentUploadPage: React.FC = () => {
  const navigate = useNavigate();
  const [selectedDocumentType, setSelectedDocumentType] = useState<DocumentType>('PASSPORT');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [preview, setPreview] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [ocrPreview, setOcrPreview] = useState<string | null>(null);
  const [token, setToken] = useState<string | null>(getAuthToken());
  const [userId, setUserId] = useState<string | null>(null);

  useEffect(() => {
    // refresh token from unified storage in case it was set after auth
    const currentToken = getAuthToken();
    if (currentToken !== token) {
      setToken(currentToken);
    }

    if (!token) {
      showTelegramAlert('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
      navigate('/profile');
      return;
    }

    // Fetch current user profile to get real userId
    (async () => {
      try {
        const profile = await authApi.getProfile(token);
        if (profile.success && profile.data) {
          setUserId(profile.data.id);
        } else {
          showTelegramAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
          navigate('/profile');
        }
      } catch {
        showTelegramAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        navigate('/profile');
      }
    })();

    // Get user ID from token (in real app, would decode JWT)
    // For now, we'll use a mock user ID
    setUserId('user_dev_1');

    setupTelegramMainButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', handleUploadDocument, { 
      isActive: selectedFile !== null && !loading 
    });

    return () => {
      hideTelegramMainButton();
      if (preview) {
        URL.revokeObjectURL(preview);
      }
    };
  }, [token, selectedFile, loading, navigate]);

  const handleFileChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    setError(null);
    setOcrPreview(null);
    
    const file = event.target.files?.[0];
    if (!file) {
      setSelectedFile(null);
      setPreview(null);
      return;
    }

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      setError('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã JPG, PNG –∏ WebP');
      return;
    }

    // Validate file size (10MB)
    if (file.size > 10 * 1024 * 1024) {
      setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
      return;
    }

    setSelectedFile(file);
    
    // Create preview
    const newPreview = URL.createObjectURL(file);
    setPreview(newPreview);
  }, []);

  const handleUploadDocument = useCallback(async () => {
    if (!selectedFile || !userId || !token) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('document', selectedFile);
      formData.append('documentType', selectedDocumentType);

      const response = await documentsApi.uploadDocument(formData, token);

      if (response.success && response.data) {
        showTelegramAlert('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
        
        // Show OCR preview if available
        if (response.data.ocrPreview?.success) {
          setOcrPreview(response.data.ocrPreview.text);
        }
        
        // Navigate back to profile after a short delay
        setTimeout(() => {
          navigate('/profile');
        }, 2000);
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        showTelegramAlert(response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }
    } catch (err) {
      console.error('Upload error:', err);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      showTelegramAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    } finally {
      setLoading(false);
    }
  }, [selectedFile, userId, token, selectedDocumentType, navigate]);

  const getDocumentTypeLabel = (type: DocumentType): string => {
    switch (type) {
      case 'PASSPORT':
        return '–ü–∞—Å–ø–æ—Ä—Ç';
      case 'DRIVER_LICENSE':
        return '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ';
      default:
        return '–î–æ–∫—É–º–µ–Ω—Ç';
    }
  };

  const getDocumentTypeDescription = (type: DocumentType): string => {
    switch (type) {
      case 'PASSPORT':
        return '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Å–ø–æ—Ä—Ç–∞ –†–§';
      case 'DRIVER_LICENSE':
        return '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è';
      default:
        return '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞';
    }
  };

  return (
    <div className="document-upload-page">
      <h2>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h2>
      
      {error && <div className="error-message">{error}</div>}

      <div className="document-type-selector">
        <h3>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
        <div className="type-buttons">
          <button
            className={`type-button ${selectedDocumentType === 'PASSPORT' ? 'active' : ''}`}
            onClick={() => setSelectedDocumentType('PASSPORT')}
          >
            üìÑ –ü–∞—Å–ø–æ—Ä—Ç
          </button>
          <button
            className={`type-button ${selectedDocumentType === 'DRIVER_LICENSE' ? 'active' : ''}`}
            onClick={() => setSelectedDocumentType('DRIVER_LICENSE')}
          >
            üöó –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞
          </button>
        </div>
      </div>

      <div className="document-info">
        <h3>{getDocumentTypeLabel(selectedDocumentType)}</h3>
        <p>{getDocumentTypeDescription(selectedDocumentType)}</p>
        
        <div className="requirements">
          <h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:</h4>
          <ul>
            <li>–ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è</li>
            <li>–•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ</li>
            <li>–í–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω</li>
            <li>–§–æ—Ä–º–∞—Ç: JPG, PNG –∏–ª–∏ WebP</li>
            <li>–†–∞–∑–º–µ—Ä: –Ω–µ –±–æ–ª–µ–µ 10MB</li>
          </ul>
        </div>
      </div>

      <div className="file-upload-section">
        <input
          type="file"
          accept="image/jpeg,image/png,image/webp"
          onChange={handleFileChange}
          disabled={loading}
          id="document-upload-input"
          style={{ display: 'none' }}
        />
        <label htmlFor="document-upload-input" className="file-upload-label">
          {selectedFile ? '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª' : '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª'}
        </label>
      </div>

      {preview && (
        <div className="document-preview">
          <h3>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
          <img src={preview} alt="Document preview" className="preview-image" />
          <p className="file-info">
            –§–∞–π–ª: {selectedFile?.name} ({(selectedFile?.size || 0 / 1024 / 1024).toFixed(2)} MB)
          </p>
        </div>
      )}

      {ocrPreview && (
        <div className="ocr-preview">
          <h3>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</h3>
          <div className="ocr-text">
            {ocrPreview}
          </div>
          <p className="ocr-note">
            * –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ. –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.
          </p>
        </div>
      )}

      {loading && (
        <div className="loading-spinner">
          <div className="spinner"></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...</span>
        </div>
      )}
    </div>
  );
};

export default DocumentUploadPage;
