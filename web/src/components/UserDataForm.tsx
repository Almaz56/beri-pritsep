import React, { useState } from 'react';
import { showTelegramAlert } from '../telegram';

interface UserDataFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: UserData) => void;
}

interface UserData {
  firstName: string;
  lastName: string;
  middleName?: string;
  passportSeries: string;
  passportNumber: string;
  passportIssuedBy: string;
  passportIssuedDate: string;
  birthDate: string;
  birthPlace: string;
}

const UserDataForm: React.FC<UserDataFormProps> = ({
  isOpen,
  onClose,
  onSubmit
}) => {
  const [formData, setFormData] = useState<UserData>({
    firstName: '',
    lastName: '',
    middleName: '',
    passportSeries: '',
    passportNumber: '',
    passportIssuedBy: '',
    passportIssuedDate: '',
    birthDate: '',
    birthPlace: ''
  });
  const [loading, setLoading] = useState(false);

  const handleInputChange = (field: keyof UserData, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const validateForm = (): boolean => {
    if (!formData.firstName.trim()) {
      showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è');
      return false;
    }
    if (!formData.lastName.trim()) {
      showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é');
      return false;
    }
    if (!formData.passportSeries.trim()) {
      showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞');
      return false;
    }
    if (!formData.passportNumber.trim()) {
      showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞');
      return false;
    }
    if (!formData.passportIssuedBy.trim()) {
      showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç');
      return false;
    }
    if (!formData.passportIssuedDate) {
      showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞');
      return false;
    }
    if (!formData.birthDate) {
      showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è');
      return false;
    }
    if (!formData.birthPlace.trim()) {
      showTelegramAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è');
      return false;
    }

    // Validate passport series format (4 digits)
    if (!/^\d{4}$/.test(formData.passportSeries)) {
      showTelegramAlert('–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã');
      return false;
    }

    // Validate passport number format (6 digits)
    if (!/^\d{6}$/.test(formData.passportNumber)) {
      showTelegramAlert('–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä');
      return false;
    }

    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);
    try {
      await onSubmit(formData);
      onClose();
    } catch (error) {
      console.error('User data submission error:', error);
      showTelegramAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="user-data-modal-overlay">
      <div className="user-data-modal">
        <div className="user-data-header">
          <h3>üìã –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
          <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</p>
        </div>
        
        <form onSubmit={handleSubmit} className="user-data-form">
          <div className="form-section">
            <h4>–§–ò–û</h4>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è *</label>
                <input
                  id="lastName"
                  type="text"
                  value={formData.lastName}
                  onChange={(e) => handleInputChange('lastName', e.target.value)}
                  placeholder="–ò–≤–∞–Ω–æ–≤"
                  className="form-input"
                  disabled={loading}
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="firstName">–ò–º—è *</label>
                <input
                  id="firstName"
                  type="text"
                  value={formData.firstName}
                  onChange={(e) => handleInputChange('firstName', e.target.value)}
                  placeholder="–ò–≤–∞–Ω"
                  className="form-input"
                  disabled={loading}
                  required
                />
              </div>
            </div>
            <div className="form-group">
              <label htmlFor="middleName">–û—Ç—á–µ—Å—Ç–≤–æ</label>
              <input
                id="middleName"
                type="text"
                value={formData.middleName}
                onChange={(e) => handleInputChange('middleName', e.target.value)}
                placeholder="–ò–≤–∞–Ω–æ–≤–∏—á"
                className="form-input"
                disabled={loading}
              />
            </div>
          </div>

          <div className="form-section">
            <h4>–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="passportSeries">–°–µ—Ä–∏—è *</label>
                <input
                  id="passportSeries"
                  type="text"
                  value={formData.passportSeries}
                  onChange={(e) => handleInputChange('passportSeries', e.target.value.replace(/\D/g, '').slice(0, 4))}
                  placeholder="1234"
                  className="form-input"
                  disabled={loading}
                  maxLength={4}
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="passportNumber">–ù–æ–º–µ—Ä *</label>
                <input
                  id="passportNumber"
                  type="text"
                  value={formData.passportNumber}
                  onChange={(e) => handleInputChange('passportNumber', e.target.value.replace(/\D/g, '').slice(0, 6))}
                  placeholder="567890"
                  className="form-input"
                  disabled={loading}
                  maxLength={6}
                  required
                />
              </div>
            </div>
            <div className="form-group">
              <label htmlFor="passportIssuedBy">–ö–µ–º –≤—ã–¥–∞–Ω *</label>
              <input
                id="passportIssuedBy"
                type="text"
                value={formData.passportIssuedBy}
                onChange={(e) => handleInputChange('passportIssuedBy', e.target.value)}
                placeholder="–û–£–§–ú–° –†–æ—Å—Å–∏–∏ –ø–æ –≥. –ú–æ—Å–∫–≤–µ"
                className="form-input"
                disabled={loading}
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="passportIssuedDate">–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ *</label>
              <input
                id="passportIssuedDate"
                type="date"
                value={formData.passportIssuedDate}
                onChange={(e) => handleInputChange('passportIssuedDate', e.target.value)}
                className="form-input"
                disabled={loading}
                required
              />
            </div>
          </div>

          <div className="form-section">
            <h4>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            <div className="form-group">
              <label htmlFor="birthDate">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è *</label>
              <input
                id="birthDate"
                type="date"
                value={formData.birthDate}
                onChange={(e) => handleInputChange('birthDate', e.target.value)}
                className="form-input"
                disabled={loading}
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="birthPlace">–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è *</label>
              <input
                id="birthPlace"
                type="text"
                value={formData.birthPlace}
                onChange={(e) => handleInputChange('birthPlace', e.target.value)}
                placeholder="–≥. –ú–æ—Å–∫–≤–∞"
                className="form-input"
                disabled={loading}
                required
              />
            </div>
          </div>
          
          <div className="form-actions">
            <button
              type="submit"
              className="btn-primary form-submit-btn"
              disabled={loading}
            >
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserDataForm;
