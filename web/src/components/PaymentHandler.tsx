import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { showTelegramAlert } from '../telegram';
import { getAuthToken } from '../api';
import './PaymentHandler.css';

interface PaymentHandlerProps {
  bookingId: string;
  amount: number;
  paymentType: 'RENTAL' | 'DEPOSIT_HOLD';
  onSuccess?: () => void;
  onError?: (error: string) => void;
}

interface PaymentResponse {
  success: boolean;
  data?: {
    paymentId: string;
    paymentUrl: string;
  };
  error?: string;
}

const PaymentHandler: React.FC<PaymentHandlerProps> = ({
  bookingId,
  amount,
  paymentType,
  onSuccess,
  onError
}) => {
  const [loading, setLoading] = useState(false);
  const [paymentUrl, setPaymentUrl] = useState<string | null>(null);
  const [paymentStatus, setPaymentStatus] = useState<'idle' | 'creating' | 'waiting' | 'processing' | 'completed' | 'failed'>('idle');
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const API_BASE_URL = (import.meta as any).env?.VITE_API_BASE_URL || 
    (window.location.hostname === 'app.beripritsep.ru' 
      ? 'https://api.beripritsep.ru/api' 
      : 'http://localhost:8080/api');

  const createPayment = async (): Promise<PaymentResponse> => {
    const token = getAuthToken();
    if (!token) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
    }

    const response = await fetch(`${API_BASE_URL}/payments/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        bookingId,
        amount,
        type: paymentType
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  };

  const handlePayment = async () => {
    try {
      setLoading(true);
      setError(null);
      setPaymentStatus('creating');
      
      const result = await createPayment();
      
      if (result.success && result.data) {
        setPaymentUrl(result.data.paymentUrl);
        setPaymentStatus('waiting');
        
        // Open payment URL in new window
        const paymentWindow = window.open(
          result.data.paymentUrl,
          'payment',
          'width=600,height=700,scrollbars=yes,resizable=yes'
        );

        if (!paymentWindow) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω.');
        }

        setPaymentStatus('processing');

        // Monitor payment window
        const checkPaymentStatus = setInterval(async () => {
          try {
            if (paymentWindow.closed) {
              clearInterval(checkPaymentStatus);
              setPaymentStatus('processing');
              await checkPaymentResult(result.data!.paymentId);
            }
          } catch (error) {
            console.error('Error checking payment status:', error);
            setError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞');
            setPaymentStatus('failed');
          }
        }, 2000);

        // Timeout after 10 minutes
        setTimeout(() => {
          if (!paymentWindow.closed) {
            paymentWindow.close();
            clearInterval(checkPaymentStatus);
            setError('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ');
            setPaymentStatus('failed');
            showTelegramAlert('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ');
            onError?.('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ');
          }
        }, 600000);

      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }
    } catch (error) {
      console.error('Payment error:', error);
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞';
      setError(errorMessage);
      setPaymentStatus('failed');
      showTelegramAlert(errorMessage);
      onError?.(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const checkPaymentResult = async (paymentId: string) => {
    try {
      const token = getAuthToken();
      const response = await fetch(`${API_BASE_URL}/payments/${paymentId}/status`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success && result.data) {
        const status = result.data.status;
        
        if (status === 'COMPLETED') {
          setPaymentStatus('completed');
          showTelegramAlert('–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
          onSuccess?.();
        } else if (status === 'FAILED' || status === 'CANCELLED') {
          setPaymentStatus('failed');
          setError('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
          showTelegramAlert('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
          onError?.('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
        } else {
          // Still processing
          setPaymentStatus('processing');
          setTimeout(() => checkPaymentResult(paymentId), 3000);
        }
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞');
      }
    } catch (error) {
      console.error('Payment status check error:', error);
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞';
      setError(errorMessage);
      setPaymentStatus('failed');
      showTelegramAlert(errorMessage);
      onError?.(errorMessage);
    }
  };

  const getPaymentTypeText = () => {
    switch (paymentType) {
      case 'RENTAL':
        return '–û–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã';
      case 'DEPOSIT_HOLD':
        return '–ó–∞–ª–æ–≥ (HOLD)';
      default:
        return '–ü–ª–∞—Ç–µ–∂';
    }
  };

  const getPaymentDescription = () => {
    switch (paymentType) {
      case 'RENTAL':
        return '–û–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã –ø—Ä–∏—Ü–µ–ø–∞';
      case 'DEPOSIT_HOLD':
        return '–ó–∞–ª–æ–≥ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏—Ü–µ–ø–∞';
      default:
        return '';
    }
  };

  return (
    <div className="payment-handler">
      <div className="payment-info">
        <h3>{getPaymentTypeText()}</h3>
        <p className="payment-description">{getPaymentDescription()}</p>
        <div className="payment-amount">
          <span className="amount-label">–°—É–º–º–∞:</span>
          <span className="amount-value">{amount}‚ÇΩ</span>
        </div>
      </div>

      <div className="payment-actions">
        <button
          className="payment-button"
          onClick={handlePayment}
          disabled={loading || paymentStatus === 'completed'}
        >
          {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : 
           paymentStatus === 'completed' ? '–û–ø–ª–∞—á–µ–Ω–æ' :
           paymentStatus === 'failed' ? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' :
           paymentStatus === 'processing' ? '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...' :
           paymentStatus === 'waiting' ? '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...' :
           '–û–ø–ª–∞—Ç–∏—Ç—å'}
        </button>
      </div>

      {paymentStatus !== 'idle' && (
        <div className="payment-status">
          <div className={`status-indicator ${paymentStatus}`}>
            {paymentStatus === 'creating' && 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...'}
            {paymentStatus === 'waiting' && '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...'}
            {paymentStatus === 'processing' && 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...'}
            {paymentStatus === 'completed' && '‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!'}
            {paymentStatus === 'failed' && '‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞'}
          </div>
          {error && (
            <div className="error-message">
              {error}
            </div>
          )}
        </div>
      )}

      {paymentUrl && (
        <div className="payment-status">
          <p>–û–∫–Ω–æ –æ–ø–ª–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–æ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ.</p>
        </div>
      )}
    </div>
  );
};

export default PaymentHandler;
